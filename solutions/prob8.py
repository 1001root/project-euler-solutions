# Problem 8
# Find the thirteen adjacent digits in the 1000-digit number that have the
# greatest product. What is the value of this product?

from time import perf_counter

num = str("""
73167176531330624919225119674426574742355349194934
96983520312774506326239578318016984801869478851843
85861560789112949495459501737958331952853208805511
12540698747158523863050715693290963295227443043557
66896648950445244523161731856403098711121722383113
62229893423380308135336276614282806444486645238749
30358907296290491560440772390713810515859307960866
70172427121883998797908792274921901699720888093776
65727333001053367881220235421809751254540594752243
52584907711670556013604839586446706324415722155397
53697817977846174064955149290862569321978468622482
83972241375657056057490261407972968652414535100474
82166370484403199890008895243450658541227588666881
16427171479924442928230863465674813919123162824586
17866458359124566529476545682848912883142607690042
24219022671055626321111109370544217506941658960408
07198403850962455444362981230987879927244284909188
84580156166097919133875499200524063689912560717606
05886116467109405077541002256983155200055935729725
71636269561882670428252483600823257530420752963450""".replace("\n", ""))

step = 13

# Method 1
start1 = perf_counter()

head = 0
tail = step - 1
greatest = 0

while tail < len(num):
    temp = 1
    for i in range(head, head + step):
        temp *= int(num[i])
    if temp > greatest:
        greatest = temp
    head += 1
    tail += 1

print(greatest)
print('Time 1: ', perf_counter() - start1)

# Method 2

start2 = perf_counter()
segments = [segment for segment in num.split('0') if len(segment) >= step]

greatest2 = 0
for segment in segments:
    head2 = 0
    tail2 = step - 1

    while tail2 < len(segment):
        temp = 1
        for i in range(head2, head2 + step):
            temp *= int(segment[i])
        if temp > greatest2:
            greatest2 = temp
        head2 += 1
        tail2 += 1

print(greatest2)
print('Time 2: ', perf_counter() - start2)
